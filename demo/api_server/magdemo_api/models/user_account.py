# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from magdemo_api.models.base_model_ import Model
from magdemo_api import util


class UserAccount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, addresses: List[int]=None, changed_by: str=None, changed_on: datetime=None, created_by: str=None, created_on: datetime=None, fullname: str=None, id: int=None, name: str=None):  # noqa: E501
        """UserAccount - a model defined in Swagger

        :param addresses: The addresses of this UserAccount.  # noqa: E501
        :type addresses: List[int]
        :param changed_by: The changed_by of this UserAccount.  # noqa: E501
        :type changed_by: str
        :param changed_on: The changed_on of this UserAccount.  # noqa: E501
        :type changed_on: datetime
        :param created_by: The created_by of this UserAccount.  # noqa: E501
        :type created_by: str
        :param created_on: The created_on of this UserAccount.  # noqa: E501
        :type created_on: datetime
        :param fullname: The fullname of this UserAccount.  # noqa: E501
        :type fullname: str
        :param id: The id of this UserAccount.  # noqa: E501
        :type id: int
        :param name: The name of this UserAccount.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'addresses': List[int],
            'changed_by': str,
            'changed_on': datetime,
            'created_by': str,
            'created_on': datetime,
            'fullname': str,
            'id': int,
            'name': str
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'changed_by': 'changed_by',
            'changed_on': 'changed_on',
            'created_by': 'created_by',
            'created_on': 'created_on',
            'fullname': 'fullname',
            'id': 'id',
            'name': 'name'
        }
        self._addresses = addresses
        self._changed_by = changed_by
        self._changed_on = changed_on
        self._created_by = created_by
        self._created_on = created_on
        self._fullname = fullname
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'UserAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_account of this UserAccount.  # noqa: E501
        :rtype: UserAccount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self) -> List[int]:
        """Gets the addresses of this UserAccount.


        :return: The addresses of this UserAccount.
        :rtype: List[int]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses: List[int]):
        """Sets the addresses of this UserAccount.


        :param addresses: The addresses of this UserAccount.
        :type addresses: List[int]
        """

        self._addresses = addresses

    @property
    def changed_by(self) -> str:
        """Gets the changed_by of this UserAccount.

        User name/email of the user who last changed the record via API  # noqa: E501

        :return: The changed_by of this UserAccount.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by: str):
        """Sets the changed_by of this UserAccount.

        User name/email of the user who last changed the record via API  # noqa: E501

        :param changed_by: The changed_by of this UserAccount.
        :type changed_by: str
        """

        self._changed_by = changed_by

    @property
    def changed_on(self) -> datetime:
        """Gets the changed_on of this UserAccount.

        Timestamp on which the record was last changed, automatically filled by the API  # noqa: E501

        :return: The changed_on of this UserAccount.
        :rtype: datetime
        """
        return self._changed_on

    @changed_on.setter
    def changed_on(self, changed_on: datetime):
        """Sets the changed_on of this UserAccount.

        Timestamp on which the record was last changed, automatically filled by the API  # noqa: E501

        :param changed_on: The changed_on of this UserAccount.
        :type changed_on: datetime
        """

        self._changed_on = changed_on

    @property
    def created_by(self) -> str:
        """Gets the created_by of this UserAccount.

        User name/email of the user who inserted the record via API  # noqa: E501

        :return: The created_by of this UserAccount.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: str):
        """Sets the created_by of this UserAccount.

        User name/email of the user who inserted the record via API  # noqa: E501

        :param created_by: The created_by of this UserAccount.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def created_on(self) -> datetime:
        """Gets the created_on of this UserAccount.

        Timestamp on which the record was created, automatically filled by the API  # noqa: E501

        :return: The created_on of this UserAccount.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on: datetime):
        """Sets the created_on of this UserAccount.

        Timestamp on which the record was created, automatically filled by the API  # noqa: E501

        :param created_on: The created_on of this UserAccount.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def fullname(self) -> str:
        """Gets the fullname of this UserAccount.

        to be documented  # noqa: E501

        :return: The fullname of this UserAccount.
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname: str):
        """Sets the fullname of this UserAccount.

        to be documented  # noqa: E501

        :param fullname: The fullname of this UserAccount.
        :type fullname: str
        """

        self._fullname = fullname

    @property
    def id(self) -> int:
        """Gets the id of this UserAccount.

        to be documented  # noqa: E501

        :return: The id of this UserAccount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UserAccount.

        to be documented  # noqa: E501

        :param id: The id of this UserAccount.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this UserAccount.

        to be documented  # noqa: E501

        :return: The name of this UserAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UserAccount.

        to be documented  # noqa: E501

        :param name: The name of this UserAccount.
        :type name: str
        """

        self._name = name
