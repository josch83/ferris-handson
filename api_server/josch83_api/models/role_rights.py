# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from josch83_api.models.base_model_ import Model
from josch83_api import util


class RoleRights(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, can_access: bool=None, can_create: bool=None, can_delete: bool=None, can_read: bool=None, can_update: bool=None, changed_by: str=None, changed_on: datetime=None, created_by: str=None, created_on: datetime=None, entity: str=None, id: int=None, role: str=None):  # noqa: E501
        """RoleRights - a model defined in Swagger

        :param can_access: The can_access of this RoleRights.  # noqa: E501
        :type can_access: bool
        :param can_create: The can_create of this RoleRights.  # noqa: E501
        :type can_create: bool
        :param can_delete: The can_delete of this RoleRights.  # noqa: E501
        :type can_delete: bool
        :param can_read: The can_read of this RoleRights.  # noqa: E501
        :type can_read: bool
        :param can_update: The can_update of this RoleRights.  # noqa: E501
        :type can_update: bool
        :param changed_by: The changed_by of this RoleRights.  # noqa: E501
        :type changed_by: str
        :param changed_on: The changed_on of this RoleRights.  # noqa: E501
        :type changed_on: datetime
        :param created_by: The created_by of this RoleRights.  # noqa: E501
        :type created_by: str
        :param created_on: The created_on of this RoleRights.  # noqa: E501
        :type created_on: datetime
        :param entity: The entity of this RoleRights.  # noqa: E501
        :type entity: str
        :param id: The id of this RoleRights.  # noqa: E501
        :type id: int
        :param role: The role of this RoleRights.  # noqa: E501
        :type role: str
        """
        self.swagger_types = {
            'can_access': bool,
            'can_create': bool,
            'can_delete': bool,
            'can_read': bool,
            'can_update': bool,
            'changed_by': str,
            'changed_on': datetime,
            'created_by': str,
            'created_on': datetime,
            'entity': str,
            'id': int,
            'role': str
        }

        self.attribute_map = {
            'can_access': 'can_access',
            'can_create': 'can_create',
            'can_delete': 'can_delete',
            'can_read': 'can_read',
            'can_update': 'can_update',
            'changed_by': 'changed_by',
            'changed_on': 'changed_on',
            'created_by': 'created_by',
            'created_on': 'created_on',
            'entity': 'entity',
            'id': 'id',
            'role': 'role'
        }
        self._can_access = can_access
        self._can_create = can_create
        self._can_delete = can_delete
        self._can_read = can_read
        self._can_update = can_update
        self._changed_by = changed_by
        self._changed_on = changed_on
        self._created_by = created_by
        self._created_on = created_on
        self._entity = entity
        self._id = id
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'RoleRights':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The role_rights of this RoleRights.  # noqa: E501
        :rtype: RoleRights
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_access(self) -> bool:
        """Gets the can_access of this RoleRights.

        to be documented  # noqa: E501

        :return: The can_access of this RoleRights.
        :rtype: bool
        """
        return self._can_access

    @can_access.setter
    def can_access(self, can_access: bool):
        """Sets the can_access of this RoleRights.

        to be documented  # noqa: E501

        :param can_access: The can_access of this RoleRights.
        :type can_access: bool
        """

        self._can_access = can_access

    @property
    def can_create(self) -> bool:
        """Gets the can_create of this RoleRights.

        to be documented  # noqa: E501

        :return: The can_create of this RoleRights.
        :rtype: bool
        """
        return self._can_create

    @can_create.setter
    def can_create(self, can_create: bool):
        """Sets the can_create of this RoleRights.

        to be documented  # noqa: E501

        :param can_create: The can_create of this RoleRights.
        :type can_create: bool
        """

        self._can_create = can_create

    @property
    def can_delete(self) -> bool:
        """Gets the can_delete of this RoleRights.

        to be documented  # noqa: E501

        :return: The can_delete of this RoleRights.
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete: bool):
        """Sets the can_delete of this RoleRights.

        to be documented  # noqa: E501

        :param can_delete: The can_delete of this RoleRights.
        :type can_delete: bool
        """

        self._can_delete = can_delete

    @property
    def can_read(self) -> bool:
        """Gets the can_read of this RoleRights.

        to be documented  # noqa: E501

        :return: The can_read of this RoleRights.
        :rtype: bool
        """
        return self._can_read

    @can_read.setter
    def can_read(self, can_read: bool):
        """Sets the can_read of this RoleRights.

        to be documented  # noqa: E501

        :param can_read: The can_read of this RoleRights.
        :type can_read: bool
        """

        self._can_read = can_read

    @property
    def can_update(self) -> bool:
        """Gets the can_update of this RoleRights.

        to be documented  # noqa: E501

        :return: The can_update of this RoleRights.
        :rtype: bool
        """
        return self._can_update

    @can_update.setter
    def can_update(self, can_update: bool):
        """Sets the can_update of this RoleRights.

        to be documented  # noqa: E501

        :param can_update: The can_update of this RoleRights.
        :type can_update: bool
        """

        self._can_update = can_update

    @property
    def changed_by(self) -> str:
        """Gets the changed_by of this RoleRights.

        User name/email of the user who last changed the record via API  # noqa: E501

        :return: The changed_by of this RoleRights.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by: str):
        """Sets the changed_by of this RoleRights.

        User name/email of the user who last changed the record via API  # noqa: E501

        :param changed_by: The changed_by of this RoleRights.
        :type changed_by: str
        """

        self._changed_by = changed_by

    @property
    def changed_on(self) -> datetime:
        """Gets the changed_on of this RoleRights.

        Timestamp on which the record was last changed, automatically filled by the API  # noqa: E501

        :return: The changed_on of this RoleRights.
        :rtype: datetime
        """
        return self._changed_on

    @changed_on.setter
    def changed_on(self, changed_on: datetime):
        """Sets the changed_on of this RoleRights.

        Timestamp on which the record was last changed, automatically filled by the API  # noqa: E501

        :param changed_on: The changed_on of this RoleRights.
        :type changed_on: datetime
        """

        self._changed_on = changed_on

    @property
    def created_by(self) -> str:
        """Gets the created_by of this RoleRights.

        User name/email of the user who inserted the record via API  # noqa: E501

        :return: The created_by of this RoleRights.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: str):
        """Sets the created_by of this RoleRights.

        User name/email of the user who inserted the record via API  # noqa: E501

        :param created_by: The created_by of this RoleRights.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def created_on(self) -> datetime:
        """Gets the created_on of this RoleRights.

        Timestamp on which the record was created, automatically filled by the API  # noqa: E501

        :return: The created_on of this RoleRights.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on: datetime):
        """Sets the created_on of this RoleRights.

        Timestamp on which the record was created, automatically filled by the API  # noqa: E501

        :param created_on: The created_on of this RoleRights.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def entity(self) -> str:
        """Gets the entity of this RoleRights.

        to be documented  # noqa: E501

        :return: The entity of this RoleRights.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity: str):
        """Sets the entity of this RoleRights.

        to be documented  # noqa: E501

        :param entity: The entity of this RoleRights.
        :type entity: str
        """

        self._entity = entity

    @property
    def id(self) -> int:
        """Gets the id of this RoleRights.

        Auto increment ID of the Entity  # noqa: E501

        :return: The id of this RoleRights.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this RoleRights.

        Auto increment ID of the Entity  # noqa: E501

        :param id: The id of this RoleRights.
        :type id: int
        """

        self._id = id

    @property
    def role(self) -> str:
        """Gets the role of this RoleRights.

        to be documented  # noqa: E501

        :return: The role of this RoleRights.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this RoleRights.

        to be documented  # noqa: E501

        :param role: The role of this RoleRights.
        :type role: str
        """
        allowed_values = ["admin", "developer"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
